// this was auto-generated by Bloc-Code-Generator

import 'package:rxdart/rxdart.dart';
import 'package:meta/meta.dart';
import 'package:school_app/Api/repository.dart';
import 'package:school_app/Model/LogData.dart';
import 'package:school_app/TableElements/data_processor.dart';

class LogDataBloc {
  Repository _repository = Repository();
  final inputController = BehaviorSubject<InputMap>();

  final outputController = BehaviorSubject<OutputMap>();

  Sink<InputMap> get inputSink => inputController.sink;

  Observable<OutputMap> get outputStream => outputController.stream;

  LogDataBloc() {
    inputController.stream.listen(eventDispather);
  }
  eventDispather(InputMap inputMap) async {
    outputController.add(OutputMap(state: ScreenState.loading, value: "0"));
    DataProcessor dataProcessor;
    var resultList;
    LogData data;
    if (inputMap.event == Event.fetch) {
      data = await _repository.fetchLog(inputMap.value['deviceId'],
          inputMap.value['startDate'], inputMap.value['endDate']); //getting the logData
      dataProcessor = DataProcessor(logData: data); // setting up dataProcessor
      resultList = dataProcessor.getUserDetails(inputMap.value['user']); // getting the user's attendance details
    }
    outputController.add(OutputMap(value: resultList, state: ScreenState.done));
  }

  dispose() {
    inputController.close();
    outputController.close();
  }
}

enum Event { fetch, nothing }

enum ScreenState { idle, loading, done }

class InputMap {
  dynamic value;
  Event event;
  InputMap({@required this.value, @required this.event});
}

class OutputMap {
  dynamic value;
  ScreenState state;
  OutputMap({@required this.value, @required this.state});
}
